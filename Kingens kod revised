#include <avr/io.h>
#define F_CPU 9600000
#include <util/delay.h>
#include <avr/power.h>
#include <avr/interrupt.h>
# define HIGH 1
# define LOW 0

void digitalWrite(uint8_t pin, uint8_t state) {
  if (state) PORTB |= 1 << PB4; // om HIGH skickar ut 1 om low skickar ut 0
  else PORTB &= ~(1 << PB4); // till båda
}

void adc_init(void) {
  ADMUX = 1 << REFS0; // sätter max till 5V
  ADMUX |= 3; // shiftar bitarna så det blir 8bit sparade
  ADCSRA = (1 << ADEN) | (1 << ADPS2); //ADEN ADC=enable så den startar inläsning
}

uint16_t adc_read(void) {
  ADCSRA |= 1 << ADSC;
  while (ADCSRA & (1 << ADSC));
  return ADC; //retunerar den digitala signalen
}

volatile uint8_t bit_state = 0;
void tx_byte(uint8_t data) {
  bit_state ^= 1; // skickar en etta som startbit
  digitalWrite(2, bit_state);
  _delay_us(250);
  digitalWrite(2, bit_state);
  _delay_us(250);

  uint8_t parity = 0;
  for (int i = 0; i < 8; i++) { // kör igeonom pga 8 bitar meddelande
    bit_state ^= 1; // byter state dvs high vs low
    digitalWrite(2, bit_state); // skickar iväg vilket state vi är i
    _delay_us(250);
    if (data & (1 << i)) { // 1=00000001 där ettan skiftas ett steg varje genomkörning av loopen
      parity++; //  om det finns en etta så ökas parity med 1
      bit_state ^= 1; //om det är en 1:a så ska vi byta state igen. pga standard
    }
    digitalWrite(2, bit_state);// om inte 1:a så blir det lång signal dvs 0:a
    _delay_us(250);
  }

  if (parity & 1) { // om parity är jämn mängd (endast udda då sista bit:en är 1)
    parity = 0; // såtts till noll om sista bit:en och 1 är true dvs udda antal 1:or
  } else
    parity = 1;// sätts till 1:om det är jämn mängd

  bit_state ^= 1;//byter state i början av en cykel
  digitalWrite(2, bit_state); / skriver
  _delay_us(250);

  if (parity) { // om parity är ett så byter den state igen (dvs skickar 1 )
    bit_state ^= 1;
  }
  digitalWrite(2, bit_state);
  _delay_us(250);

  bit_state ^= 1;// skickar en nolla på slutet
  digitalWrite(2, bit_state);
  _delay_us(250);
  bit_state ^= 1;

  digitalWrite(2, bit_state);
  _delay_us(250);

}

void tx(uint8_t * data, int len) {
  uint8_t checksum = 0;
//  static uint8_t state = 0;
  for (int i = 0; i < 15; i++) {//tror det är preamble
    digitalWrite(2, HIGH);
    _delay_us(250);
    digitalWrite(2, LOW);
    _delay_us(250);
  }
  bit_state = 0;
  for (int i = 0; i < len; i++) {// skickar headern och meddelandet som separata paket, däraf len
    tx_byte(data[i]);// går igenom båda paketen som finns i arrayen som skickas in
    checksum ^= data[i]; // skaffar fram en chekcksum med sig själv
  }
  tx_byte(checksum); // skickar in chekcksum för att kolla den
}

static uint16_t adcvb[2];
int main() {

  clock_prescale_set(clock_div_1); //set clock to 9.6MHz, no prescaler // sätter klockan
  adc_init(); // startar hela analog to digital convertern och sätter allt rätt
  DDRB |= 1 << PB4;

  volatile uint8_t state = 0;
  while (1) {
    uint16_t adcv = adc_read(); // ADC voltage är = det vi fick in
    if (adcv < 423) {  // tror 423 motsvarar 5V
    state = 0; // gå till check state
    }

    switch (state) {
    case 0:// check state
      {
        uint16_t adcv = adc_read();
        if (adcv > 423) {// om större än 5V gå till ping
          state = 1;
          _delay_ms(10);
        }
        break;
      }
    case 1: // ping
      {
        uint8_t dt[] = {
          0x1, // 0x1 är paketet för signalstrenght
          255 // siffran som skickas om högsta spänning uppmätt för lasten
        };
        for (int i = 0; i < 20; i++) {
          tx(dt, 2);	//send ping response so that the transmitter identifies receiver.
          _delay_ms(10); // skickar signalstrenght paketet 20 gånger med  delay
        }
        state = 2; // hoppar vidare till state 2
        break;
      }

    case 2: // verkar vara en error modul
      {
        //if(adcv > ((423*3/2))) {
        int8_t error = 0; // ny variabel deklarerad
        uint16_t adcv = adc_read();
        int16_t temp_error = 0;
        adcvb[0] = adcvb[1];
        adcvb[1] = adcv;
        //if(abs(adcvb[0] - adcvb[1]) > 20)
        // temp_error = (int16_t)((423* 3) - adcv);
        //else
        temp_error = (int16_t)((423 * 2) - adcv);	//1.1v adc reference. 423 equals to 5V. (4.7/47K voltage divider)

        temp_error /= 5;
        if (temp_error > 127) temp_error = 127; // håller meddelandet innanför 
        if (temp_error < -128) temp_error = -128;// ramarna av error
        error = (int8_t) temp_error;
        uint8_t dt[] = {
          0x3, // paket för felmeddeladne
          (int8_t) error
        };
        tx(dt, 2);	//send error correction packet. 0x03 is error correction packet header. 1 BYTE payload, check WPC documents for more details.
        /*} else {
         uint8_t dt[] = {0x3,(int8_t)1};
         tx(dt,2);
        }*/
      } {
        uint8_t dt[] = {0x4, 0XFF};
        tx(dt, 2);	//received power indication packet. I am not sure if this is needed or not. Please read the WPC document
					//for more details. I jut implemented and it worked. But I am not sure if this is the proper way to do it.
      }
      //    _delay_ms(10);
      break;

    }
  }
}
